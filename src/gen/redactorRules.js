// AUTO-GENERATED by build.mjs â€“ DO NOT EDIT
export const rules = [
  {
    id: "aws_access_key_id",
    pattern: new RegExp("AKIA[0-9A-Z]{16}", "g"),
    replacer: () => "AKIA****************"
  },
  {
    id: "aws_secret_access_key",
    pattern: new RegExp("(?<![A-Za-z0-9\\/+=])[A-Za-z0-9\\/+=]{40}(?![A-Za-z0-9\\/+=])", "g"),
    replacer: () => "<AWS_SECRET_KEY>"
  },
  {
    id: "aws_account_id",
    pattern: new RegExp("(?<!\\d)\\d{12}(?!\\d)", "g"),
    replacer: () => "************"
  },
  {
    id: "aws_arn",
    pattern: new RegExp("arn:aws:[a-zA-Z0-9-]+:[a-zA-Z0-9-]*:\\d{12}:[a-zA-Z0-9-_/:.]+", "g"),
    replacer: () => "arn:aws:***:***:************:***"
  },
  {
    id: "aws_vpc_id",
    pattern: new RegExp("vpc-[0-9a-f]{8,17}", "g"),
    replacer: () => "vpc-****************"
  },
  {
    id: "aws_ec2_instance_id",
    pattern: new RegExp("i-[0-9a-f]{8,17}", "g"),
    replacer: () => "i-****************"
  },
  {
    id: "github_personal_access_token",
    pattern: new RegExp("ghp_[A-Za-z0-9]{36}", "g"),
    replacer: () => "ghp_************************************"
  },
  {
    id: "gitlab_personal_access_token",
    pattern: new RegExp("glpat-[A-Za-z0-9_-]{20,}", "g"),
    replacer: () => "glpat-********************"
  },
  {
    id: "stripe_secret_key",
    pattern: new RegExp("sk_(?:live|test)_[A-Za-z0-9]{24,}", "g"),
    replacer: () => "sk_****_************************"
  },
  {
    id: "slack_bot_token",
    pattern: new RegExp("xoxb-\\d+-\\d+-[A-Za-z0-9]+", "g"),
    replacer: () => "xoxb-***-***-***"
  },
  {
    id: "google_api_key",
    pattern: new RegExp("AIza[A-Za-z0-9_-]{35}", "g"),
    replacer: () => "AIza***********************************"
  },
  {
    id: "jwt_token",
    pattern: new RegExp("eyJ[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+", "g"),
    replacer: () => "eyJ***.***.***.***"
  },
  {
    id: "email_address",
    pattern: new RegExp("\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b", "g"),
    replacer: () => "<EMAIL>"
  },
  {
    id: "north_american_phone",
    pattern: new RegExp("(?:\\+1[-\\s]?)?\\(?([0-9]{3})\\)?[-\\s]?([0-9]{3})[-\\s]?([0-9]{4})\\b", "g"),
    replacer: () => "+1-***-***-****"
  },
  {
    id: "us_ssn",
    pattern: new RegExp("\\b\\d{3}-\\d{2}-\\d{4}\\b", "g"),
    replacer: () => "***-**-****"
  },
  {
    id: "canadian_sin",
    pattern: new RegExp("\\b\\d{3}-\\d{3}-\\d{3}\\b", "g"),
    replacer: () => "***-***-***"
  },
  {
    id: "passport_id",
    pattern: new RegExp("\\b[A-Z]{2}\\d{7,8}\\b", "g"),
    replacer: () => "**#######"
  },
  {
    id: "credit_card",
    pattern: new RegExp("\\b(?:4\\d{3}(?:[\\s-]?\\d{4}){3}|(?:5[1-5]\\d{2}|22[2-9]\\d|2[3-6]\\d{2}|27[01]\\d|2720)(?:[\\s-]?\\d{4}){3}|3[47]\\d{2}[\\s-]?\\d{6}[\\s-]?\\d{5}|6(?:011|5\\d{2})(?:[\\s-]?\\d{4}){3})\\b", "g"),
    replacer: () => "****-****-****-****"
  },
  {
    id: "iban",
    pattern: new RegExp("\\b[A-Z]{2}\\d{2}[A-Z0-9]{10,30}\\b", "g"),
    replacer: () => "**##********************"
  },
  {
    id: "ipv4_address",
    pattern: new RegExp("\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b", "g"),
    replacer: () => "***.***.***.***"
  },
  {
    id: "ipv6_address",
    pattern: new RegExp("\\b(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}\\b|\\b(?:[0-9a-fA-F]{1,4}:)*::(?:[0-9a-fA-F]{1,4}:)*[0-9a-fA-F]{1,4}\\b", "g"),
    replacer: () => "****:****:****:****:****:****:****:****"
  },
  {
    id: "private_ipv4_rfc1918",
    pattern: new RegExp("\\b(?:10\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|192\\.168\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|172\\.(?:1[6-9]|2[0-9]|3[01])\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\\b", "g"),
    replacer: () => "<PRIVATE_IP>"
  },
  {
    id: "internal_fqdn",
    pattern: new RegExp("\\b[a-zA-Z0-9-]+\\.(?:corp|internal|local|lan|intranet)\\.[a-zA-Z0-9.-]+\\b", "g"),
    replacer: () => "<INTERNAL_HOST>"
  },
  {
    id: "url_with_credentials",
    pattern: new RegExp("https?://[^\\s:]+:[^\\s@]+@[^\\s/]+", "g"),
    replacer: () => "https://***:***@<HOST>"
  },
  {
    id: "basic_auth_header",
    pattern: new RegExp("Authorization:\\s*Basic\\s+[A-Za-z0-9+/]+=*", "g"),
    replacer: () => "Authorization: Basic <REDACTED>"
  },
  {
    id: "uuid_v4",
    pattern: new RegExp("\\b[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}\\b", "i"),
    replacer: () => "********-****-4***-****-************"
  },
  {
    id: "cloudwatch_log_group_arn",
    pattern: new RegExp("arn:aws:logs:[a-zA-Z0-9-]+:\\d{12}:log-group:[a-zA-Z0-9-_/:.]+", "g"),
    replacer: () => "arn:aws:logs:***:************:log-group:***"
  },
  {
    id: "rds_endpoint",
    pattern: new RegExp("\\b[a-zA-Z0-9-]+\\.[a-zA-Z0-9]{12}\\.[a-zA-Z0-9-]+\\.rds\\.amazonaws\\.com\\b", "g"),
    replacer: () => "<RDS_ENDPOINT>"
  },
  {
    id: "kubernetes_secret",
    pattern: new RegExp("data:\\s*\\n\\s*[a-zA-Z0-9_-]+:\\s*[A-Za-z0-9+/]+=*", "g"),
    replacer: () => "data:\\n  <KEY>: <BASE64_VALUE>"
  },
  {
    id: "environment_variable_export",
    pattern: new RegExp("export\\s+[A-Z_][A-Z0-9_]*\\s*=\\s*[\"']?[^\\s\"']+[\"']?", "g"),
    replacer: () => "export <VAR>=<VALUE>"
  }
];
